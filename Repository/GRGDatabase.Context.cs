//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GRGEntity : DbContext
    {
        public GRGEntity()
            : base("name=GRGEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int SP_AirLines_Get(Nullable<int> airLineID, ObjectParameter airLineName, ObjectParameter eAirLineName, ObjectParameter officeID, ObjectParameter commissionDomestic, ObjectParameter commissionInternational, ObjectParameter commissionDomesticRefund, ObjectParameter commissionInternationalRefund, ObjectParameter iATACode, ObjectParameter rTRDNo)
        {
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AirLines_Get", airLineIDParameter, airLineName, eAirLineName, officeID, commissionDomestic, commissionInternational, commissionDomesticRefund, commissionInternationalRefund, iATACode, rTRDNo);
        }
    
        public virtual ObjectResult<SP_AirLines_GetAll_Result> SP_AirLines_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AirLines_GetAll_Result>("SP_AirLines_GetAll");
        }
    
        public virtual int SP_AirLines_GetID(ObjectParameter airLineID, string airLineName, string eAirLineName)
        {
            var airLineNameParameter = airLineName != null ?
                new ObjectParameter("AirLineName", airLineName) :
                new ObjectParameter("AirLineName", typeof(string));
    
            var eAirLineNameParameter = eAirLineName != null ?
                new ObjectParameter("EAirLineName", eAirLineName) :
                new ObjectParameter("EAirLineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AirLines_GetID", airLineID, airLineNameParameter, eAirLineNameParameter);
        }
    
        public virtual ObjectResult<byte[]> SP_AirLines_GetLogo(Nullable<int> airLineID)
        {
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("SP_AirLines_GetLogo", airLineIDParameter);
        }
    
        public virtual int SP_Airplanes_Get(Nullable<int> airplaneID, ObjectParameter airplaneName, ObjectParameter eAirplaneName)
        {
            var airplaneIDParameter = airplaneID.HasValue ?
                new ObjectParameter("AirplaneID", airplaneID) :
                new ObjectParameter("AirplaneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Airplanes_Get", airplaneIDParameter, airplaneName, eAirplaneName);
        }
    
        public virtual ObjectResult<SP_Airplanes_GetAll_Result> SP_Airplanes_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Airplanes_GetAll_Result>("SP_Airplanes_GetAll");
        }
    
        public virtual int SP_Airplanes_GetID(ObjectParameter airplaneID, string airplaneName, string eAirplaneName)
        {
            var airplaneNameParameter = airplaneName != null ?
                new ObjectParameter("AirplaneName", airplaneName) :
                new ObjectParameter("AirplaneName", typeof(string));
    
            var eAirplaneNameParameter = eAirplaneName != null ?
                new ObjectParameter("EAirplaneName", eAirplaneName) :
                new ObjectParameter("EAirplaneName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Airplanes_GetID", airplaneID, airplaneNameParameter, eAirplaneNameParameter);
        }
    
        public virtual int SP_Airports_Get(Nullable<int> airportID, ObjectParameter airportName, ObjectParameter eAirportName, ObjectParameter abbreviation, ObjectParameter cityID)
        {
            var airportIDParameter = airportID.HasValue ?
                new ObjectParameter("AirportID", airportID) :
                new ObjectParameter("AirportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Airports_Get", airportIDParameter, airportName, eAirportName, abbreviation, cityID);
        }
    
        public virtual ObjectResult<SP_Airports_GetAll_Result> SP_Airports_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Airports_GetAll_Result>("SP_Airports_GetAll");
        }
    
        public virtual ObjectResult<SP_Airports_GetAllByCity_Result> SP_Airports_GetAllByCity(Nullable<int> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Airports_GetAllByCity_Result>("SP_Airports_GetAllByCity", cityIDParameter);
        }
    
        public virtual ObjectResult<SP_Airports_GetForWeb_Result> SP_Airports_GetForWeb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Airports_GetForWeb_Result>("SP_Airports_GetForWeb");
        }
    
        public virtual int SP_CharterFlights_Get(Nullable<int> tblKey, ObjectParameter flightID, ObjectParameter linkCharterID, ObjectParameter capacity, ObjectParameter adultSalePrice, ObjectParameter childSalePrice, ObjectParameter infantSalePrice, ObjectParameter isAvailable, ObjectParameter commission, ObjectParameter maxSale, ObjectParameter internetSaleAllowable, ObjectParameter exchangeUnit, ObjectParameter adultSalePriceEx, ObjectParameter childSalePriceEx, ObjectParameter infantSalePriceEx, ObjectParameter flightClass, ObjectParameter remarks, ObjectParameter charterStatus, ObjectParameter extraSalePrice, ObjectParameter extraSalePriceEx, ObjectParameter oneWayAddPrice, ObjectParameter oneWayAddPriceEx, ObjectParameter roundTrip, ObjectParameter sOTO, ObjectParameter openTicket)
        {
            var tblKeyParameter = tblKey.HasValue ?
                new ObjectParameter("TblKey", tblKey) :
                new ObjectParameter("TblKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CharterFlights_Get", tblKeyParameter, flightID, linkCharterID, capacity, adultSalePrice, childSalePrice, infantSalePrice, isAvailable, commission, maxSale, internetSaleAllowable, exchangeUnit, adultSalePriceEx, childSalePriceEx, infantSalePriceEx, flightClass, remarks, charterStatus, extraSalePrice, extraSalePriceEx, oneWayAddPrice, oneWayAddPriceEx, roundTrip, sOTO, openTicket);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAgreements_Result> SP_CharterFlights_GetAgreements(Nullable<int> charterFlightID)
        {
            var charterFlightIDParameter = charterFlightID.HasValue ?
                new ObjectParameter("CharterFlightID", charterFlightID) :
                new ObjectParameter("CharterFlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAgreements_Result>("SP_CharterFlights_GetAgreements", charterFlightIDParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAll_Result> SP_CharterFlights_GetAll(Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd, Nullable<bool> availablity)
        {
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            var availablityParameter = availablity.HasValue ?
                new ObjectParameter("Availablity", availablity) :
                new ObjectParameter("Availablity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAll_Result>("SP_CharterFlights_GetAll", flightTimeStartParameter, flightTimeEndParameter, availablityParameter);
        }
    
        public virtual int SP_CharterFlights_GetAllFlights(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<int> fromCountryID, Nullable<int> toCountryID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var fromCountryIDParameter = fromCountryID.HasValue ?
                new ObjectParameter("FromCountryID", fromCountryID) :
                new ObjectParameter("FromCountryID", typeof(int));
    
            var toCountryIDParameter = toCountryID.HasValue ?
                new ObjectParameter("ToCountryID", toCountryID) :
                new ObjectParameter("ToCountryID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CharterFlights_GetAllFlights", fromCityIDParameter, toCityIDParameter, fromCountryIDParameter, toCountryIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAllFromCity_Result> SP_CharterFlights_GetAllFromCity(Nullable<int> fromCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAllFromCity_Result>("SP_CharterFlights_GetAllFromCity", fromCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAllFromToCity_Result> SP_CharterFlights_GetAllFromToCity(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAllFromToCity_Result>("SP_CharterFlights_GetAllFromToCity", fromCityIDParameter, toCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual int SP_CharterFlights_GetAllFromToCityCountry(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<int> fromCountryID, Nullable<int> toCountryID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var fromCountryIDParameter = fromCountryID.HasValue ?
                new ObjectParameter("FromCountryID", fromCountryID) :
                new ObjectParameter("FromCountryID", typeof(int));
    
            var toCountryIDParameter = toCountryID.HasValue ?
                new ObjectParameter("ToCountryID", toCountryID) :
                new ObjectParameter("ToCountryID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CharterFlights_GetAllFromToCityCountry", fromCityIDParameter, toCityIDParameter, fromCountryIDParameter, toCountryIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAllFromToCityWithDirection_Result> SP_CharterFlights_GetAllFromToCityWithDirection(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd, Nullable<byte> directionType)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            var directionTypeParameter = directionType.HasValue ?
                new ObjectParameter("DirectionType", directionType) :
                new ObjectParameter("DirectionType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAllFromToCityWithDirection_Result>("SP_CharterFlights_GetAllFromToCityWithDirection", fromCityIDParameter, toCityIDParameter, flightTimeStartParameter, flightTimeEndParameter, directionTypeParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAllFromToCityWithOpen_Result> SP_CharterFlights_GetAllFromToCityWithOpen(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAllFromToCityWithOpen_Result>("SP_CharterFlights_GetAllFromToCityWithOpen", fromCityIDParameter, toCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAllFromToCityWithOther_Result> SP_CharterFlights_GetAllFromToCityWithOther(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<int> returnToCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var returnToCityIDParameter = returnToCityID.HasValue ?
                new ObjectParameter("ReturnToCityID", returnToCityID) :
                new ObjectParameter("ReturnToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAllFromToCityWithOther_Result>("SP_CharterFlights_GetAllFromToCityWithOther", fromCityIDParameter, toCityIDParameter, returnToCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAllToCity_Result> SP_CharterFlights_GetAllToCity(Nullable<int> toCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAllToCity_Result>("SP_CharterFlights_GetAllToCity", toCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetAvailability_Result> SP_CharterFlights_GetAvailability(string origin, string destination, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<byte> direction, Nullable<int> numPassenger, string flightClass, string cabinType)
        {
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(byte));
    
            var numPassengerParameter = numPassenger.HasValue ?
                new ObjectParameter("NumPassenger", numPassenger) :
                new ObjectParameter("NumPassenger", typeof(int));
    
            var flightClassParameter = flightClass != null ?
                new ObjectParameter("FlightClass", flightClass) :
                new ObjectParameter("FlightClass", typeof(string));
    
            var cabinTypeParameter = cabinType != null ?
                new ObjectParameter("CabinType", cabinType) :
                new ObjectParameter("CabinType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetAvailability_Result>("SP_CharterFlights_GetAvailability", originParameter, destinationParameter, fromDateParameter, toDateParameter, directionParameter, numPassengerParameter, flightClassParameter, cabinTypeParameter);
        }
    
        public virtual int SP_CharterFlights_GetBy(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<int> airLineID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd, Nullable<byte> availablity)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            var availablityParameter = availablity.HasValue ?
                new ObjectParameter("Availablity", availablity) :
                new ObjectParameter("Availablity", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CharterFlights_GetBy", fromCityIDParameter, toCityIDParameter, airLineIDParameter, flightTimeStartParameter, flightTimeEndParameter, availablityParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetByCity_ForService_Result> SP_CharterFlights_GetByCity_ForService(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetByCity_ForService_Result>("SP_CharterFlights_GetByCity_ForService", fromCityIDParameter, toCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual int SP_CharterFlights_GetListForExchange(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CharterFlights_GetListForExchange", fromCityIDParameter, toCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual ObjectResult<SP_CharterFlights_GetManifest_Result> SP_CharterFlights_GetManifest(Nullable<int> charterFlightID)
        {
            var charterFlightIDParameter = charterFlightID.HasValue ?
                new ObjectParameter("CharterFlightID", charterFlightID) :
                new ObjectParameter("CharterFlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CharterFlights_GetManifest_Result>("SP_CharterFlights_GetManifest", charterFlightIDParameter);
        }
    
        public virtual int SP_CharterFlights_GetManifestSummary(Nullable<int> charterFlightID, ObjectParameter numADL, ObjectParameter numCHD, ObjectParameter numINF)
        {
            var charterFlightIDParameter = charterFlightID.HasValue ?
                new ObjectParameter("CharterFlightID", charterFlightID) :
                new ObjectParameter("CharterFlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CharterFlights_GetManifestSummary", charterFlightIDParameter, numADL, numCHD, numINF);
        }
    
        public virtual int SP_City_Get(Nullable<int> cityID, ObjectParameter cityName, ObjectParameter eCityName, ObjectParameter countryID, ObjectParameter countryName, ObjectParameter eCountryName, ObjectParameter telPreCode, ObjectParameter abbreviation)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_City_Get", cityIDParameter, cityName, eCityName, countryID, countryName, eCountryName, telPreCode, abbreviation);
        }
    
        public virtual ObjectResult<SP_City_GetAll_Result> SP_City_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_City_GetAll_Result>("SP_City_GetAll");
        }
    
        public virtual int SP_City_GetAllActiveByCountry(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_City_GetAllActiveByCountry", countryIDParameter);
        }
    
        public virtual ObjectResult<SP_City_GetAllActiveForFlights_Result> SP_City_GetAllActiveForFlights(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_City_GetAllActiveForFlights_Result>("SP_City_GetAllActiveForFlights", countryIDParameter);
        }
    
        public virtual ObjectResult<SP_City_GetAllActiveForHotels_Result> SP_City_GetAllActiveForHotels(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_City_GetAllActiveForHotels_Result>("SP_City_GetAllActiveForHotels", countryIDParameter);
        }
    
        public virtual ObjectResult<SP_City_GetAllActiveForTrains_Result> SP_City_GetAllActiveForTrains(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_City_GetAllActiveForTrains_Result>("SP_City_GetAllActiveForTrains", countryIDParameter);
        }
    
        public virtual ObjectResult<SP_City_GetAllByCountry_Result> SP_City_GetAllByCountry(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_City_GetAllByCountry_Result>("SP_City_GetAllByCountry", countryIDParameter);
        }
    
        public virtual ObjectResult<SP_City_GetAllByPersonnel_Result> SP_City_GetAllByPersonnel(Nullable<int> countryID, Nullable<int> pid)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_City_GetAllByPersonnel_Result>("SP_City_GetAllByPersonnel", countryIDParameter, pidParameter);
        }
    
        public virtual int SP_City_GetAllUsedByCountry(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_City_GetAllUsedByCountry", countryIDParameter);
        }
    
        public virtual int SP_City_GetAllUsedForFlights(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_City_GetAllUsedForFlights", countryIDParameter);
        }
    
        public virtual int SP_City_GetByAbberviation(string abbreviation, ObjectParameter cityID)
        {
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_City_GetByAbberviation", abbreviationParameter, cityID);
        }
    
        public virtual int SP_City_GetID(ObjectParameter cityID, string cityName)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_City_GetID", cityID, cityNameParameter);
        }
    
        public virtual int SP_CityZone_Get(Nullable<int> zoneID, ObjectParameter zoneName, ObjectParameter eZoneName, ObjectParameter cityID)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CityZone_Get", zoneIDParameter, zoneName, eZoneName, cityID);
        }
    
        public virtual ObjectResult<SP_CityZone_GetAll_Result> SP_CityZone_GetAll(Nullable<int> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CityZone_GetAll_Result>("SP_CityZone_GetAll", cityIDParameter);
        }
    
        public virtual int SP_CityZone_GetID(ObjectParameter zoneID, string zoneName, Nullable<byte> language, Nullable<int> cityID)
        {
            var zoneNameParameter = zoneName != null ?
                new ObjectParameter("ZoneName", zoneName) :
                new ObjectParameter("ZoneName", typeof(string));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(byte));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CityZone_GetID", zoneID, zoneNameParameter, languageParameter, cityIDParameter);
        }
    
        public virtual int SP_Country_Get(Nullable<int> countryID, ObjectParameter countryName, ObjectParameter eCountryName)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Country_Get", countryIDParameter, countryName, eCountryName);
        }
    
        public virtual ObjectResult<SP_Country_GetAll_Result> SP_Country_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Country_GetAll_Result>("SP_Country_GetAll");
        }
    
        public virtual ObjectResult<SP_Country_GetAllActive_Result> SP_Country_GetAllActive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Country_GetAllActive_Result>("SP_Country_GetAllActive");
        }
    
        public virtual ObjectResult<SP_Country_GetAllActiveForHotels_Result> SP_Country_GetAllActiveForHotels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Country_GetAllActiveForHotels_Result>("SP_Country_GetAllActiveForHotels");
        }
    
        public virtual ObjectResult<SP_Country_GetAllUsed_Result> SP_Country_GetAllUsed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Country_GetAllUsed_Result>("SP_Country_GetAllUsed");
        }
    
        public virtual int SP_Country_GetID(ObjectParameter countryID, string countryName)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Country_GetID", countryID, countryNameParameter);
        }
    
        public virtual ObjectResult<SP_DefineCodes_Get_Result> SP_DefineCodes_Get(Nullable<short> category)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DefineCodes_Get_Result>("SP_DefineCodes_Get", categoryParameter);
        }
    
        public virtual int SP_DefineCodes_GetCategory(Nullable<short> category, ObjectParameter description)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DefineCodes_GetCategory", categoryParameter, description);
        }
    
        public virtual int SP_DefineCodes_GetCode(ObjectParameter code, Nullable<short> category, string description)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(short));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DefineCodes_GetCode", code, categoryParameter, descriptionParameter);
        }
    
        public virtual int SP_DefineCodes_GetDesc(Nullable<short> code, Nullable<short> category, ObjectParameter description)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(short));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DefineCodes_GetDesc", codeParameter, categoryParameter, description);
        }
    
        public virtual int SP_Flights_Get(Nullable<int> flightID, ObjectParameter flightNo, ObjectParameter fromCityID, ObjectParameter toCityID, ObjectParameter flightTime, ObjectParameter arrivalTime, ObjectParameter airLineID, ObjectParameter flightType, ObjectParameter directionType, ObjectParameter capacity, ObjectParameter airplaneID, ObjectParameter adultPrice, ObjectParameter childPrice, ObjectParameter infantPrice, ObjectParameter passengersCount, ObjectParameter virtualCapacity, ObjectParameter fromAirportID, ObjectParameter toAirportID, ObjectParameter bag, ObjectParameter flightClass)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_Get", flightIDParameter, flightNo, fromCityID, toCityID, flightTime, arrivalTime, airLineID, flightType, directionType, capacity, airplaneID, adultPrice, childPrice, infantPrice, passengersCount, virtualCapacity, fromAirportID, toAirportID, bag, flightClass);
        }
    
        public virtual int SP_Flights_GetAll(Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd, Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<int> airLineID, Nullable<byte> flightType)
        {
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            var flightTypeParameter = flightType.HasValue ?
                new ObjectParameter("FlightType", flightType) :
                new ObjectParameter("FlightType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_GetAll", flightTimeStartParameter, flightTimeEndParameter, fromCityIDParameter, toCityIDParameter, airLineIDParameter, flightTypeParameter);
        }
    
        public virtual ObjectResult<SP_Flights_GetAllByCity_Result> SP_Flights_GetAllByCity(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<System.DateTime> flightTimeStart, Nullable<System.DateTime> flightTimeEnd)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeStartParameter = flightTimeStart.HasValue ?
                new ObjectParameter("FlightTimeStart", flightTimeStart) :
                new ObjectParameter("FlightTimeStart", typeof(System.DateTime));
    
            var flightTimeEndParameter = flightTimeEnd.HasValue ?
                new ObjectParameter("FlightTimeEnd", flightTimeEnd) :
                new ObjectParameter("FlightTimeEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Flights_GetAllByCity_Result>("SP_Flights_GetAllByCity", fromCityIDParameter, toCityIDParameter, flightTimeStartParameter, flightTimeEndParameter);
        }
    
        public virtual int SP_Flights_GetBy(Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<int> airLineID, Nullable<byte> flightType)
        {
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            var flightTypeParameter = flightType.HasValue ?
                new ObjectParameter("FlightType", flightType) :
                new ObjectParameter("FlightType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_GetBy", fromCityIDParameter, toCityIDParameter, airLineIDParameter, flightTypeParameter);
        }
    
        public virtual ObjectResult<SP_Flights_GetForCharterFlights_Result> SP_Flights_GetForCharterFlights(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Flights_GetForCharterFlights_Result>("SP_Flights_GetForCharterFlights", pidParameter);
        }
    
        public virtual int SP_Flights_GetInfo(Nullable<int> flightID, ObjectParameter flightNo, ObjectParameter fromCityID, ObjectParameter toCityID, ObjectParameter flightTime, ObjectParameter arrivalTime, ObjectParameter airLineID, ObjectParameter flightType, ObjectParameter directionType, ObjectParameter capacity, ObjectParameter airplaneID, ObjectParameter adultPrice, ObjectParameter childPrice, ObjectParameter infantPrice, ObjectParameter linkTo, ObjectParameter linkFlightID, ObjectParameter quota, ObjectParameter fromAirportID, ObjectParameter toAirportID, ObjectParameter bag, ObjectParameter flightClass)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_GetInfo", flightIDParameter, flightNo, fromCityID, toCityID, flightTime, arrivalTime, airLineID, flightType, directionType, capacity, airplaneID, adultPrice, childPrice, infantPrice, linkTo, linkFlightID, quota, fromAirportID, toAirportID, bag, flightClass);
        }
    
        public virtual int SP_Flights_GetLinkFlightIDs(string flightIDs, ObjectParameter linkFlightIDs)
        {
            var flightIDsParameter = flightIDs != null ?
                new ObjectParameter("FlightIDs", flightIDs) :
                new ObjectParameter("FlightIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_GetLinkFlightIDs", flightIDsParameter, linkFlightIDs);
        }
    
        public virtual int SP_Flights_GetLinkID(string flightIDs, ObjectParameter linkID)
        {
            var flightIDsParameter = flightIDs != null ?
                new ObjectParameter("FlightIDs", flightIDs) :
                new ObjectParameter("FlightIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_GetLinkID", flightIDsParameter, linkID);
        }
    
        public virtual ObjectResult<SP_Flights_GetListForManifest_Result> SP_Flights_GetListForManifest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Flights_GetListForManifest_Result>("SP_Flights_GetListForManifest");
        }
    
        public virtual ObjectResult<SP_Flights_GetManifest_Result> SP_Flights_GetManifest(Nullable<int> flightID)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Flights_GetManifest_Result>("SP_Flights_GetManifest", flightIDParameter);
        }
    
        public virtual ObjectResult<SP_Flights_GetManifestByTicket_Result> SP_Flights_GetManifestByTicket(Nullable<int> flightID, string ticketNo)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(int));
    
            var ticketNoParameter = ticketNo != null ?
                new ObjectParameter("TicketNo", ticketNo) :
                new ObjectParameter("TicketNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Flights_GetManifestByTicket_Result>("SP_Flights_GetManifestByTicket", flightIDParameter, ticketNoParameter);
        }
    
        public virtual int SP_Flights_GetManifestByWays(Nullable<byte> wayType, Nullable<int> flightIDWent, Nullable<int> flightIDReturn)
        {
            var wayTypeParameter = wayType.HasValue ?
                new ObjectParameter("WayType", wayType) :
                new ObjectParameter("WayType", typeof(byte));
    
            var flightIDWentParameter = flightIDWent.HasValue ?
                new ObjectParameter("FlightIDWent", flightIDWent) :
                new ObjectParameter("FlightIDWent", typeof(int));
    
            var flightIDReturnParameter = flightIDReturn.HasValue ?
                new ObjectParameter("FlightIDReturn", flightIDReturn) :
                new ObjectParameter("FlightIDReturn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_GetManifestByWays", wayTypeParameter, flightIDWentParameter, flightIDReturnParameter);
        }
    
        public virtual int SP_Flights_GetManifestSummary(Nullable<int> flightID, ObjectParameter numADL, ObjectParameter numCHD, ObjectParameter numINF)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_GetManifestSummary", flightIDParameter, numADL, numCHD, numINF);
        }
    
        public virtual ObjectResult<SP_Flights_GetSchedules_Result> SP_Flights_GetSchedules(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> airLineID, Nullable<byte> flightType)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            var flightTypeParameter = flightType.HasValue ?
                new ObjectParameter("FlightType", flightType) :
                new ObjectParameter("FlightType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Flights_GetSchedules_Result>("SP_Flights_GetSchedules", startDateParameter, endDateParameter, airLineIDParameter, flightTypeParameter);
        }
    
        public virtual ObjectResult<SP_Flights_GetTickets_Result> SP_Flights_GetTickets(Nullable<int> flightID)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Flights_GetTickets_Result>("SP_Flights_GetTickets", flightIDParameter);
        }
    
        public virtual int SP_Logging_Insert(Nullable<int> pid, Nullable<int> logForm, Nullable<byte> logAction, string logDesc, string iPAddress, string ethernetAddress)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            var logFormParameter = logForm.HasValue ?
                new ObjectParameter("LogForm", logForm) :
                new ObjectParameter("LogForm", typeof(int));
    
            var logActionParameter = logAction.HasValue ?
                new ObjectParameter("LogAction", logAction) :
                new ObjectParameter("LogAction", typeof(byte));
    
            var logDescParameter = logDesc != null ?
                new ObjectParameter("LogDesc", logDesc) :
                new ObjectParameter("LogDesc", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var ethernetAddressParameter = ethernetAddress != null ?
                new ObjectParameter("EthernetAddress", ethernetAddress) :
                new ObjectParameter("EthernetAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Logging_Insert", pidParameter, logFormParameter, logActionParameter, logDescParameter, iPAddressParameter, ethernetAddressParameter);
        }
    
        public virtual int SP_LoggingOffices_Insert(Nullable<int> personID, Nullable<int> logForm, Nullable<byte> logAction, string logDesc, string iPAddress, string ethernetAddress)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var logFormParameter = logForm.HasValue ?
                new ObjectParameter("LogForm", logForm) :
                new ObjectParameter("LogForm", typeof(int));
    
            var logActionParameter = logAction.HasValue ?
                new ObjectParameter("LogAction", logAction) :
                new ObjectParameter("LogAction", typeof(byte));
    
            var logDescParameter = logDesc != null ?
                new ObjectParameter("LogDesc", logDesc) :
                new ObjectParameter("LogDesc", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var ethernetAddressParameter = ethernetAddress != null ?
                new ObjectParameter("EthernetAddress", ethernetAddress) :
                new ObjectParameter("EthernetAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LoggingOffices_Insert", personIDParameter, logFormParameter, logActionParameter, logDescParameter, iPAddressParameter, ethernetAddressParameter);
        }
    
        public virtual int SP_Persons_ChangePass(string userID, string newPass)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var newPassParameter = newPass != null ?
                new ObjectParameter("NewPass", newPass) :
                new ObjectParameter("NewPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_ChangePass", userIDParameter, newPassParameter);
        }
    
        public virtual int SP_Persons_Get(Nullable<int> personID, ObjectParameter firstName, ObjectParameter lastName, ObjectParameter eFirstName, ObjectParameter eLastName, ObjectParameter fatherName, ObjectParameter nationalID, ObjectParameter passportNo, ObjectParameter birthDate, ObjectParameter gender, ObjectParameter mobileNumber, ObjectParameter telNumber, ObjectParameter eMail, ObjectParameter address, ObjectParameter job, ObjectParameter iDNumber, ObjectParameter birthLocate, ObjectParameter userID, ObjectParameter hasAccount, ObjectParameter sendSMS, ObjectParameter sendEMail, ObjectParameter registerDate, ObjectParameter passportExpireDate, ObjectParameter nationality)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_Get", personIDParameter, firstName, lastName, eFirstName, eLastName, fatherName, nationalID, passportNo, birthDate, gender, mobileNumber, telNumber, eMail, address, job, iDNumber, birthLocate, userID, hasAccount, sendSMS, sendEMail, registerDate, passportExpireDate, nationality);
        }
    
        public virtual ObjectResult<SP_Persons_GetByAgreement_Result> SP_Persons_GetByAgreement(Nullable<int> agreementID)
        {
            var agreementIDParameter = agreementID.HasValue ?
                new ObjectParameter("AgreementID", agreementID) :
                new ObjectParameter("AgreementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Persons_GetByAgreement_Result>("SP_Persons_GetByAgreement", agreementIDParameter);
        }
    
        public virtual int SP_Persons_GetByEMail(string eMail, ObjectParameter personID, ObjectParameter firstName, ObjectParameter lastName, ObjectParameter eFirstName, ObjectParameter eLastName, ObjectParameter fatherName, ObjectParameter nationalID, ObjectParameter passportNo, ObjectParameter birthDate, ObjectParameter gender, ObjectParameter mobileNumber, ObjectParameter telNumber, ObjectParameter address, ObjectParameter job, ObjectParameter iDNumber, ObjectParameter birthLocate, ObjectParameter userID, ObjectParameter hasAccount, ObjectParameter sendSMS, ObjectParameter sendEMail, ObjectParameter registerDate, ObjectParameter passportExpireDate, ObjectParameter nationality)
        {
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_GetByEMail", eMailParameter, personID, firstName, lastName, eFirstName, eLastName, fatherName, nationalID, passportNo, birthDate, gender, mobileNumber, telNumber, address, job, iDNumber, birthLocate, userID, hasAccount, sendSMS, sendEMail, registerDate, passportExpireDate, nationality);
        }
    
        public virtual int SP_Persons_GetByNationalID(string nationalID, ObjectParameter personID, ObjectParameter firstName, ObjectParameter lastName, ObjectParameter eFirstName, ObjectParameter eLastName, ObjectParameter fatherName, ObjectParameter passportNo, ObjectParameter birthDate, ObjectParameter gender, ObjectParameter mobileNumber, ObjectParameter telNumber, ObjectParameter eMail, ObjectParameter address, ObjectParameter job, ObjectParameter iDNumber, ObjectParameter birthLocate, ObjectParameter userID, ObjectParameter hasAccount, ObjectParameter sendSMS, ObjectParameter sendEMail, ObjectParameter registerDate, ObjectParameter passportExpireDate, ObjectParameter nationality)
        {
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_GetByNationalID", nationalIDParameter, personID, firstName, lastName, eFirstName, eLastName, fatherName, passportNo, birthDate, gender, mobileNumber, telNumber, eMail, address, job, iDNumber, birthLocate, userID, hasAccount, sendSMS, sendEMail, registerDate, passportExpireDate, nationality);
        }
    
        public virtual int SP_Persons_GetByPassport(string passportNo, ObjectParameter personID, ObjectParameter firstName, ObjectParameter lastName, ObjectParameter eFirstName, ObjectParameter eLastName, ObjectParameter fatherName, ObjectParameter nationalID, ObjectParameter birthDate, ObjectParameter gender, ObjectParameter mobileNumber, ObjectParameter telNumber, ObjectParameter eMail, ObjectParameter address, ObjectParameter job, ObjectParameter iDNumber, ObjectParameter birthLocate, ObjectParameter userID, ObjectParameter hasAccount, ObjectParameter sendSMS, ObjectParameter sendEMail, ObjectParameter registerDate, ObjectParameter passportExpireDate, ObjectParameter nationality)
        {
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_GetByPassport", passportNoParameter, personID, firstName, lastName, eFirstName, eLastName, fatherName, nationalID, birthDate, gender, mobileNumber, telNumber, eMail, address, job, iDNumber, birthLocate, userID, hasAccount, sendSMS, sendEMail, registerDate, passportExpireDate, nationality);
        }
    
        public virtual ObjectResult<SP_Persons_GetFlightTickets_Result> SP_Persons_GetFlightTickets(Nullable<int> personID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Persons_GetFlightTickets_Result>("SP_Persons_GetFlightTickets", personIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int SP_Persons_Insert(ObjectParameter personID, string firstName, string lastName, string eFirstName, string eLastName, string fatherName, string nationalID, string passportNo, string birthDate, Nullable<bool> gender, string mobileNumber, string telNumber, string eMail, string address, string job, string iDNumber, string birthLocate, Nullable<bool> sendSMS, Nullable<bool> sendEMail, Nullable<System.DateTime> passportExpireDate, Nullable<int> nationality)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var eFirstNameParameter = eFirstName != null ?
                new ObjectParameter("EFirstName", eFirstName) :
                new ObjectParameter("EFirstName", typeof(string));
    
            var eLastNameParameter = eLastName != null ?
                new ObjectParameter("ELastName", eLastName) :
                new ObjectParameter("ELastName", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var birthDateParameter = birthDate != null ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var iDNumberParameter = iDNumber != null ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(string));
    
            var birthLocateParameter = birthLocate != null ?
                new ObjectParameter("BirthLocate", birthLocate) :
                new ObjectParameter("BirthLocate", typeof(string));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sendEMailParameter = sendEMail.HasValue ?
                new ObjectParameter("SendEMail", sendEMail) :
                new ObjectParameter("SendEMail", typeof(bool));
    
            var passportExpireDateParameter = passportExpireDate.HasValue ?
                new ObjectParameter("PassportExpireDate", passportExpireDate) :
                new ObjectParameter("PassportExpireDate", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_Insert", personID, firstNameParameter, lastNameParameter, eFirstNameParameter, eLastNameParameter, fatherNameParameter, nationalIDParameter, passportNoParameter, birthDateParameter, genderParameter, mobileNumberParameter, telNumberParameter, eMailParameter, addressParameter, jobParameter, iDNumberParameter, birthLocateParameter, sendSMSParameter, sendEMailParameter, passportExpireDateParameter, nationalityParameter);
        }
    
        public virtual int SP_Persons_IsExist(string nationalID, ObjectParameter personID)
        {
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_IsExist", nationalIDParameter, personID);
        }
    
        public virtual int SP_Persons_IsOfficePersonnel(Nullable<int> personID, ObjectParameter officeID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_IsOfficePersonnel", personIDParameter, officeID);
        }
    
        public virtual int SP_Persons_ResetPassword(string nationalID, string eMail, ObjectParameter newPass, ObjectParameter retVal)
        {
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_ResetPassword", nationalIDParameter, eMailParameter, newPass, retVal);
        }
    
        public virtual int SP_Persons_Update(Nullable<int> personID, string firstName, string lastName, string eFirstName, string eLastName, string fatherName, string nationalID, string passportNo, string birthDate, Nullable<bool> gender, string mobileNumber, string telNumber, string eMail, string address, string job, string iDNumber, string birthLocate, Nullable<bool> sendSMS, Nullable<bool> sendEMail, Nullable<System.DateTime> passportExpireDate, Nullable<int> nationality)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var eFirstNameParameter = eFirstName != null ?
                new ObjectParameter("EFirstName", eFirstName) :
                new ObjectParameter("EFirstName", typeof(string));
    
            var eLastNameParameter = eLastName != null ?
                new ObjectParameter("ELastName", eLastName) :
                new ObjectParameter("ELastName", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var birthDateParameter = birthDate != null ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var iDNumberParameter = iDNumber != null ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(string));
    
            var birthLocateParameter = birthLocate != null ?
                new ObjectParameter("BirthLocate", birthLocate) :
                new ObjectParameter("BirthLocate", typeof(string));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sendEMailParameter = sendEMail.HasValue ?
                new ObjectParameter("SendEMail", sendEMail) :
                new ObjectParameter("SendEMail", typeof(bool));
    
            var passportExpireDateParameter = passportExpireDate.HasValue ?
                new ObjectParameter("PassportExpireDate", passportExpireDate) :
                new ObjectParameter("PassportExpireDate", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_Update", personIDParameter, firstNameParameter, lastNameParameter, eFirstNameParameter, eLastNameParameter, fatherNameParameter, nationalIDParameter, passportNoParameter, birthDateParameter, genderParameter, mobileNumberParameter, telNumberParameter, eMailParameter, addressParameter, jobParameter, iDNumberParameter, birthLocateParameter, sendSMSParameter, sendEMailParameter, passportExpireDateParameter, nationalityParameter);
        }
    
        public virtual int SP_Persons_Validate(string userID, string password, ObjectParameter personID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Persons_Validate", userIDParameter, passwordParameter, personID);
        }
    
        public virtual int SP_Reservations_Complete(Nullable<int> reservationID, Nullable<bool> completed)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var completedParameter = completed.HasValue ?
                new ObjectParameter("Completed", completed) :
                new ObjectParameter("Completed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Reservations_Complete", reservationIDParameter, completedParameter);
        }
    
        public virtual ObjectResult<SP_Reservations_Confirm_Result> SP_Reservations_Confirm(Nullable<int> reservationID, Nullable<int> pid, ObjectParameter agreementID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Reservations_Confirm_Result>("SP_Reservations_Confirm", reservationIDParameter, pidParameter, agreementID);
        }
    
        public virtual int SP_Reservations_Delete(Nullable<int> reservationID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Reservations_Delete", reservationIDParameter);
        }
    
        public virtual int SP_Reservations_Get(Nullable<int> reservationID, ObjectParameter registerDate, ObjectParameter pid, ObjectParameter personID, ObjectParameter reservationType, ObjectParameter packageID, ObjectParameter hasTour, ObjectParameter hasVisa, ObjectParameter hasHotel, ObjectParameter hasTicket, ObjectParameter hasInsurance, ObjectParameter hasTransfer, ObjectParameter hasLeader, ObjectParameter hasOtherServices, ObjectParameter dayDuration, ObjectParameter nightDuration, ObjectParameter numPersons, ObjectParameter completed, ObjectParameter confirmation, ObjectParameter confirmPid, ObjectParameter confirmDate, ObjectParameter services, ObjectParameter agreementID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Reservations_Get", reservationIDParameter, registerDate, pid, personID, reservationType, packageID, hasTour, hasVisa, hasHotel, hasTicket, hasInsurance, hasTransfer, hasLeader, hasOtherServices, dayDuration, nightDuration, numPersons, completed, confirmation, confirmPid, confirmDate, services, agreementID);
        }
    
        public virtual int SP_Reservations_Insert(ObjectParameter reservationID, Nullable<int> pid, Nullable<int> personID, Nullable<byte> reservationType, Nullable<int> packageID, Nullable<bool> hasTour, Nullable<bool> hasVisa, Nullable<bool> hasHotel, Nullable<bool> hasTicket, Nullable<bool> hasInsurance, Nullable<bool> hasTransfer, Nullable<bool> hasLeader, Nullable<bool> hasOtherServices, Nullable<byte> dayDuration, Nullable<byte> nightDuration, Nullable<int> numPersons)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var reservationTypeParameter = reservationType.HasValue ?
                new ObjectParameter("ReservationType", reservationType) :
                new ObjectParameter("ReservationType", typeof(byte));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var hasTourParameter = hasTour.HasValue ?
                new ObjectParameter("HasTour", hasTour) :
                new ObjectParameter("HasTour", typeof(bool));
    
            var hasVisaParameter = hasVisa.HasValue ?
                new ObjectParameter("HasVisa", hasVisa) :
                new ObjectParameter("HasVisa", typeof(bool));
    
            var hasHotelParameter = hasHotel.HasValue ?
                new ObjectParameter("HasHotel", hasHotel) :
                new ObjectParameter("HasHotel", typeof(bool));
    
            var hasTicketParameter = hasTicket.HasValue ?
                new ObjectParameter("HasTicket", hasTicket) :
                new ObjectParameter("HasTicket", typeof(bool));
    
            var hasInsuranceParameter = hasInsurance.HasValue ?
                new ObjectParameter("HasInsurance", hasInsurance) :
                new ObjectParameter("HasInsurance", typeof(bool));
    
            var hasTransferParameter = hasTransfer.HasValue ?
                new ObjectParameter("HasTransfer", hasTransfer) :
                new ObjectParameter("HasTransfer", typeof(bool));
    
            var hasLeaderParameter = hasLeader.HasValue ?
                new ObjectParameter("HasLeader", hasLeader) :
                new ObjectParameter("HasLeader", typeof(bool));
    
            var hasOtherServicesParameter = hasOtherServices.HasValue ?
                new ObjectParameter("HasOtherServices", hasOtherServices) :
                new ObjectParameter("HasOtherServices", typeof(bool));
    
            var dayDurationParameter = dayDuration.HasValue ?
                new ObjectParameter("DayDuration", dayDuration) :
                new ObjectParameter("DayDuration", typeof(byte));
    
            var nightDurationParameter = nightDuration.HasValue ?
                new ObjectParameter("NightDuration", nightDuration) :
                new ObjectParameter("NightDuration", typeof(byte));
    
            var numPersonsParameter = numPersons.HasValue ?
                new ObjectParameter("NumPersons", numPersons) :
                new ObjectParameter("NumPersons", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Reservations_Insert", reservationID, pidParameter, personIDParameter, reservationTypeParameter, packageIDParameter, hasTourParameter, hasVisaParameter, hasHotelParameter, hasTicketParameter, hasInsuranceParameter, hasTransferParameter, hasLeaderParameter, hasOtherServicesParameter, dayDurationParameter, nightDurationParameter, numPersonsParameter);
        }
    
        public virtual int SP_Reservations_InsertForFlightTicket(ObjectParameter reservationID, Nullable<int> personID, Nullable<byte> reservationType, Nullable<int> numAdultPerson, Nullable<int> numChildPerson, Nullable<int> numInfantPerson, Nullable<int> departureFlightID, Nullable<int> departureCharterFlightID, Nullable<int> returnFlightID, Nullable<int> returnCharterFlightID, Nullable<bool> openTicket, Nullable<int> countryPosition, ObjectParameter returnMessage)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var reservationTypeParameter = reservationType.HasValue ?
                new ObjectParameter("ReservationType", reservationType) :
                new ObjectParameter("ReservationType", typeof(byte));
    
            var numAdultPersonParameter = numAdultPerson.HasValue ?
                new ObjectParameter("NumAdultPerson", numAdultPerson) :
                new ObjectParameter("NumAdultPerson", typeof(int));
    
            var numChildPersonParameter = numChildPerson.HasValue ?
                new ObjectParameter("NumChildPerson", numChildPerson) :
                new ObjectParameter("NumChildPerson", typeof(int));
    
            var numInfantPersonParameter = numInfantPerson.HasValue ?
                new ObjectParameter("NumInfantPerson", numInfantPerson) :
                new ObjectParameter("NumInfantPerson", typeof(int));
    
            var departureFlightIDParameter = departureFlightID.HasValue ?
                new ObjectParameter("DepartureFlightID", departureFlightID) :
                new ObjectParameter("DepartureFlightID", typeof(int));
    
            var departureCharterFlightIDParameter = departureCharterFlightID.HasValue ?
                new ObjectParameter("DepartureCharterFlightID", departureCharterFlightID) :
                new ObjectParameter("DepartureCharterFlightID", typeof(int));
    
            var returnFlightIDParameter = returnFlightID.HasValue ?
                new ObjectParameter("ReturnFlightID", returnFlightID) :
                new ObjectParameter("ReturnFlightID", typeof(int));
    
            var returnCharterFlightIDParameter = returnCharterFlightID.HasValue ?
                new ObjectParameter("ReturnCharterFlightID", returnCharterFlightID) :
                new ObjectParameter("ReturnCharterFlightID", typeof(int));
    
            var openTicketParameter = openTicket.HasValue ?
                new ObjectParameter("OpenTicket", openTicket) :
                new ObjectParameter("OpenTicket", typeof(bool));
    
            var countryPositionParameter = countryPosition.HasValue ?
                new ObjectParameter("CountryPosition", countryPosition) :
                new ObjectParameter("CountryPosition", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Reservations_InsertForFlightTicket", reservationID, personIDParameter, reservationTypeParameter, numAdultPersonParameter, numChildPersonParameter, numInfantPersonParameter, departureFlightIDParameter, departureCharterFlightIDParameter, returnFlightIDParameter, returnCharterFlightIDParameter, openTicketParameter, countryPositionParameter, returnMessage);
        }
    
        public virtual int SP_Reservations_Validate(Nullable<int> reservationID, Nullable<int> personID, ObjectParameter retVal)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Reservations_Validate", reservationIDParameter, personIDParameter, retVal);
        }
    
        public virtual int SP_Reservations_Void(Nullable<int> reservationID, Nullable<int> voider)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var voiderParameter = voider.HasValue ?
                new ObjectParameter("Voider", voider) :
                new ObjectParameter("Voider", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Reservations_Void", reservationIDParameter, voiderParameter);
        }
    
        public virtual int SP_ReservationsPersons_Get(Nullable<int> personID, ObjectParameter reservationID, ObjectParameter firstName, ObjectParameter lastName, ObjectParameter eFirstName, ObjectParameter eLastName, ObjectParameter nationalID, ObjectParameter passportNo, ObjectParameter birthDate, ObjectParameter gender, ObjectParameter mobileNumber, ObjectParameter telNumber, ObjectParameter eMail, ObjectParameter address, ObjectParameter passportExpireDate, ObjectParameter nationality, ObjectParameter visaType, ObjectParameter roomType, ObjectParameter ageType, ObjectParameter seat, ObjectParameter ticketPrice, ObjectParameter hotelPrice, ObjectParameter visaPrice, ObjectParameter insurancePrice, ObjectParameter transferPrice, ObjectParameter leaderPrice, ObjectParameter otherServicesPrice, ObjectParameter discount, ObjectParameter extraPrice, ObjectParameter extraPriceUnit, ObjectParameter descriptions, ObjectParameter createDate)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ReservationsPersons_Get", personIDParameter, reservationID, firstName, lastName, eFirstName, eLastName, nationalID, passportNo, birthDate, gender, mobileNumber, telNumber, eMail, address, passportExpireDate, nationality, visaType, roomType, ageType, seat, ticketPrice, hotelPrice, visaPrice, insurancePrice, transferPrice, leaderPrice, otherServicesPrice, discount, extraPrice, extraPriceUnit, descriptions, createDate);
        }
    
        public virtual ObjectResult<SP_ReservationsPersons_GetAll_Result> SP_ReservationsPersons_GetAll(Nullable<int> reservationID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ReservationsPersons_GetAll_Result>("SP_ReservationsPersons_GetAll", reservationIDParameter);
        }
    
        public virtual int SP_ReservationsPersons_Insert(ObjectParameter personID, Nullable<int> reservationID, string firstName, string lastName, string eFirstName, string eLastName, string nationalID, string passportNo, string birthDate, Nullable<bool> gender, string mobileNumber, string telNumber, string eMail, string address, Nullable<System.DateTime> passportExpireDate, Nullable<int> nationality, Nullable<byte> visaType, Nullable<byte> roomType, Nullable<byte> ageType, Nullable<byte> seat, Nullable<decimal> ticketPrice, Nullable<decimal> hotelPrice, Nullable<decimal> visaPrice, Nullable<decimal> insurancePrice, Nullable<decimal> transferPrice, Nullable<decimal> leaderPrice, Nullable<decimal> otherServicesPrice, Nullable<decimal> discount, Nullable<decimal> extraPrice, Nullable<byte> extraPriceUnit, string descriptions)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var eFirstNameParameter = eFirstName != null ?
                new ObjectParameter("EFirstName", eFirstName) :
                new ObjectParameter("EFirstName", typeof(string));
    
            var eLastNameParameter = eLastName != null ?
                new ObjectParameter("ELastName", eLastName) :
                new ObjectParameter("ELastName", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var birthDateParameter = birthDate != null ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var passportExpireDateParameter = passportExpireDate.HasValue ?
                new ObjectParameter("PassportExpireDate", passportExpireDate) :
                new ObjectParameter("PassportExpireDate", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var visaTypeParameter = visaType.HasValue ?
                new ObjectParameter("VisaType", visaType) :
                new ObjectParameter("VisaType", typeof(byte));
    
            var roomTypeParameter = roomType.HasValue ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(byte));
    
            var ageTypeParameter = ageType.HasValue ?
                new ObjectParameter("AgeType", ageType) :
                new ObjectParameter("AgeType", typeof(byte));
    
            var seatParameter = seat.HasValue ?
                new ObjectParameter("Seat", seat) :
                new ObjectParameter("Seat", typeof(byte));
    
            var ticketPriceParameter = ticketPrice.HasValue ?
                new ObjectParameter("TicketPrice", ticketPrice) :
                new ObjectParameter("TicketPrice", typeof(decimal));
    
            var hotelPriceParameter = hotelPrice.HasValue ?
                new ObjectParameter("HotelPrice", hotelPrice) :
                new ObjectParameter("HotelPrice", typeof(decimal));
    
            var visaPriceParameter = visaPrice.HasValue ?
                new ObjectParameter("VisaPrice", visaPrice) :
                new ObjectParameter("VisaPrice", typeof(decimal));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(decimal));
    
            var transferPriceParameter = transferPrice.HasValue ?
                new ObjectParameter("TransferPrice", transferPrice) :
                new ObjectParameter("TransferPrice", typeof(decimal));
    
            var leaderPriceParameter = leaderPrice.HasValue ?
                new ObjectParameter("LeaderPrice", leaderPrice) :
                new ObjectParameter("LeaderPrice", typeof(decimal));
    
            var otherServicesPriceParameter = otherServicesPrice.HasValue ?
                new ObjectParameter("OtherServicesPrice", otherServicesPrice) :
                new ObjectParameter("OtherServicesPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var extraPriceParameter = extraPrice.HasValue ?
                new ObjectParameter("ExtraPrice", extraPrice) :
                new ObjectParameter("ExtraPrice", typeof(decimal));
    
            var extraPriceUnitParameter = extraPriceUnit.HasValue ?
                new ObjectParameter("ExtraPriceUnit", extraPriceUnit) :
                new ObjectParameter("ExtraPriceUnit", typeof(byte));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ReservationsPersons_Insert", personID, reservationIDParameter, firstNameParameter, lastNameParameter, eFirstNameParameter, eLastNameParameter, nationalIDParameter, passportNoParameter, birthDateParameter, genderParameter, mobileNumberParameter, telNumberParameter, eMailParameter, addressParameter, passportExpireDateParameter, nationalityParameter, visaTypeParameter, roomTypeParameter, ageTypeParameter, seatParameter, ticketPriceParameter, hotelPriceParameter, visaPriceParameter, insurancePriceParameter, transferPriceParameter, leaderPriceParameter, otherServicesPriceParameter, discountParameter, extraPriceParameter, extraPriceUnitParameter, descriptionsParameter);
        }
    
        public virtual int SP_ReservationsPersons_Update(Nullable<int> personID, string firstName, string lastName, string eFirstName, string eLastName, string nationalID, string passportNo, string birthDate, Nullable<bool> gender, string mobileNumber, string telNumber, string eMail, string address, Nullable<System.DateTime> passportExpireDate, Nullable<int> nationality, Nullable<byte> visaType, Nullable<byte> roomType, Nullable<byte> ageType, Nullable<byte> seat, Nullable<decimal> ticketPrice, Nullable<decimal> hotelPrice, Nullable<decimal> visaPrice, Nullable<decimal> insurancePrice, Nullable<decimal> transferPrice, Nullable<decimal> leaderPrice, Nullable<decimal> otherServicesPrice, Nullable<decimal> discount, Nullable<decimal> extraPrice, Nullable<byte> extraPriceUnit, string descriptions)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var eFirstNameParameter = eFirstName != null ?
                new ObjectParameter("EFirstName", eFirstName) :
                new ObjectParameter("EFirstName", typeof(string));
    
            var eLastNameParameter = eLastName != null ?
                new ObjectParameter("ELastName", eLastName) :
                new ObjectParameter("ELastName", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var birthDateParameter = birthDate != null ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var passportExpireDateParameter = passportExpireDate.HasValue ?
                new ObjectParameter("PassportExpireDate", passportExpireDate) :
                new ObjectParameter("PassportExpireDate", typeof(System.DateTime));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var visaTypeParameter = visaType.HasValue ?
                new ObjectParameter("VisaType", visaType) :
                new ObjectParameter("VisaType", typeof(byte));
    
            var roomTypeParameter = roomType.HasValue ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(byte));
    
            var ageTypeParameter = ageType.HasValue ?
                new ObjectParameter("AgeType", ageType) :
                new ObjectParameter("AgeType", typeof(byte));
    
            var seatParameter = seat.HasValue ?
                new ObjectParameter("Seat", seat) :
                new ObjectParameter("Seat", typeof(byte));
    
            var ticketPriceParameter = ticketPrice.HasValue ?
                new ObjectParameter("TicketPrice", ticketPrice) :
                new ObjectParameter("TicketPrice", typeof(decimal));
    
            var hotelPriceParameter = hotelPrice.HasValue ?
                new ObjectParameter("HotelPrice", hotelPrice) :
                new ObjectParameter("HotelPrice", typeof(decimal));
    
            var visaPriceParameter = visaPrice.HasValue ?
                new ObjectParameter("VisaPrice", visaPrice) :
                new ObjectParameter("VisaPrice", typeof(decimal));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(decimal));
    
            var transferPriceParameter = transferPrice.HasValue ?
                new ObjectParameter("TransferPrice", transferPrice) :
                new ObjectParameter("TransferPrice", typeof(decimal));
    
            var leaderPriceParameter = leaderPrice.HasValue ?
                new ObjectParameter("LeaderPrice", leaderPrice) :
                new ObjectParameter("LeaderPrice", typeof(decimal));
    
            var otherServicesPriceParameter = otherServicesPrice.HasValue ?
                new ObjectParameter("OtherServicesPrice", otherServicesPrice) :
                new ObjectParameter("OtherServicesPrice", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var extraPriceParameter = extraPrice.HasValue ?
                new ObjectParameter("ExtraPrice", extraPrice) :
                new ObjectParameter("ExtraPrice", typeof(decimal));
    
            var extraPriceUnitParameter = extraPriceUnit.HasValue ?
                new ObjectParameter("ExtraPriceUnit", extraPriceUnit) :
                new ObjectParameter("ExtraPriceUnit", typeof(byte));
    
            var descriptionsParameter = descriptions != null ?
                new ObjectParameter("Descriptions", descriptions) :
                new ObjectParameter("Descriptions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ReservationsPersons_Update", personIDParameter, firstNameParameter, lastNameParameter, eFirstNameParameter, eLastNameParameter, nationalIDParameter, passportNoParameter, birthDateParameter, genderParameter, mobileNumberParameter, telNumberParameter, eMailParameter, addressParameter, passportExpireDateParameter, nationalityParameter, visaTypeParameter, roomTypeParameter, ageTypeParameter, seatParameter, ticketPriceParameter, hotelPriceParameter, visaPriceParameter, insurancePriceParameter, transferPriceParameter, leaderPriceParameter, otherServicesPriceParameter, discountParameter, extraPriceParameter, extraPriceUnitParameter, descriptionsParameter);
        }
    
        public virtual int SP_SysParam_Get(ObjectParameter officeCode, ObjectParameter officeName, ObjectParameter eOfficeName, ObjectParameter officeAddress, ObjectParameter eOfficeAddress, ObjectParameter officeTel, ObjectParameter officeFax, ObjectParameter appVersion, ObjectParameter homePage, ObjectParameter eMail, ObjectParameter sMTPServer, ObjectParameter username, ObjectParameter password, ObjectParameter fromName, ObjectParameter fromAddress, ObjectParameter replyTo, ObjectParameter encodeMethod, ObjectParameter protectedApp, ObjectParameter protectedWebApp, ObjectParameter updateType, ObjectParameter updatePath, ObjectParameter taxForPassenger, ObjectParameter taxForOffice, ObjectParameter taxPercent, ObjectParameter curDate, ObjectParameter curTime, ObjectParameter isIATA, ObjectParameter iATACode, ObjectParameter isGroup, ObjectParameter licenceKey, ObjectParameter licenceValidation, ObjectParameter timeReservationCancel, ObjectParameter insuranceBrokerID, ObjectParameter insuranceUserID, ObjectParameter insurancePassword, ObjectParameter insuranceAgencyCode, ObjectParameter licenseCode, ObjectParameter licenseDate, ObjectParameter passwordComplex, ObjectParameter passwordLenght, ObjectParameter passwordHistory, ObjectParameter passwordAge, ObjectParameter autoCloseTimeCheck, ObjectParameter nationalID, ObjectParameter economicCode, ObjectParameter zipCode, ObjectParameter saleFlight, ObjectParameter saleTrain, ObjectParameter saleBus)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SysParam_Get", officeCode, officeName, eOfficeName, officeAddress, eOfficeAddress, officeTel, officeFax, appVersion, homePage, eMail, sMTPServer, username, password, fromName, fromAddress, replyTo, encodeMethod, protectedApp, protectedWebApp, updateType, updatePath, taxForPassenger, taxForOffice, taxPercent, curDate, curTime, isIATA, iATACode, isGroup, licenceKey, licenceValidation, timeReservationCancel, insuranceBrokerID, insuranceUserID, insurancePassword, insuranceAgencyCode, licenseCode, licenseDate, passwordComplex, passwordLenght, passwordHistory, passwordAge, autoCloseTimeCheck, nationalID, economicCode, zipCode, saleFlight, saleTrain, saleBus);
        }
    
        public virtual int SP_SysParam_Update(Nullable<int> officeCode, string officeName, string eOfficeName, string officeAddress, string officeTel, string officeFax, string homePage, string eMail, string sMTPServer, string username, string password, string fromName, string fromAddress, string replyTo, Nullable<byte> encodeMethod, Nullable<byte> updateType, string updatePath, Nullable<bool> taxForPassenger, Nullable<bool> taxForOffice, Nullable<short> taxPercent, Nullable<bool> isIATA, Nullable<bool> isGroup, Nullable<int> timeReservationCancel, string licenseCode, string licenseDate, Nullable<bool> passwordComplex, Nullable<short> passwordLenght, Nullable<short> passwordHistory, Nullable<short> passwordAge, string nationalID, string economicCode, string zipCode, Nullable<int> insuranceBrokerID, string insuranceUserID, string insurancePassword, string insuranceAgencyCode)
        {
            var officeCodeParameter = officeCode.HasValue ?
                new ObjectParameter("OfficeCode", officeCode) :
                new ObjectParameter("OfficeCode", typeof(int));
    
            var officeNameParameter = officeName != null ?
                new ObjectParameter("OfficeName", officeName) :
                new ObjectParameter("OfficeName", typeof(string));
    
            var eOfficeNameParameter = eOfficeName != null ?
                new ObjectParameter("EOfficeName", eOfficeName) :
                new ObjectParameter("EOfficeName", typeof(string));
    
            var officeAddressParameter = officeAddress != null ?
                new ObjectParameter("OfficeAddress", officeAddress) :
                new ObjectParameter("OfficeAddress", typeof(string));
    
            var officeTelParameter = officeTel != null ?
                new ObjectParameter("OfficeTel", officeTel) :
                new ObjectParameter("OfficeTel", typeof(string));
    
            var officeFaxParameter = officeFax != null ?
                new ObjectParameter("OfficeFax", officeFax) :
                new ObjectParameter("OfficeFax", typeof(string));
    
            var homePageParameter = homePage != null ?
                new ObjectParameter("HomePage", homePage) :
                new ObjectParameter("HomePage", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var sMTPServerParameter = sMTPServer != null ?
                new ObjectParameter("SMTPServer", sMTPServer) :
                new ObjectParameter("SMTPServer", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var fromNameParameter = fromName != null ?
                new ObjectParameter("FromName", fromName) :
                new ObjectParameter("FromName", typeof(string));
    
            var fromAddressParameter = fromAddress != null ?
                new ObjectParameter("FromAddress", fromAddress) :
                new ObjectParameter("FromAddress", typeof(string));
    
            var replyToParameter = replyTo != null ?
                new ObjectParameter("ReplyTo", replyTo) :
                new ObjectParameter("ReplyTo", typeof(string));
    
            var encodeMethodParameter = encodeMethod.HasValue ?
                new ObjectParameter("EncodeMethod", encodeMethod) :
                new ObjectParameter("EncodeMethod", typeof(byte));
    
            var updateTypeParameter = updateType.HasValue ?
                new ObjectParameter("UpdateType", updateType) :
                new ObjectParameter("UpdateType", typeof(byte));
    
            var updatePathParameter = updatePath != null ?
                new ObjectParameter("UpdatePath", updatePath) :
                new ObjectParameter("UpdatePath", typeof(string));
    
            var taxForPassengerParameter = taxForPassenger.HasValue ?
                new ObjectParameter("TaxForPassenger", taxForPassenger) :
                new ObjectParameter("TaxForPassenger", typeof(bool));
    
            var taxForOfficeParameter = taxForOffice.HasValue ?
                new ObjectParameter("TaxForOffice", taxForOffice) :
                new ObjectParameter("TaxForOffice", typeof(bool));
    
            var taxPercentParameter = taxPercent.HasValue ?
                new ObjectParameter("TaxPercent", taxPercent) :
                new ObjectParameter("TaxPercent", typeof(short));
    
            var isIATAParameter = isIATA.HasValue ?
                new ObjectParameter("IsIATA", isIATA) :
                new ObjectParameter("IsIATA", typeof(bool));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var timeReservationCancelParameter = timeReservationCancel.HasValue ?
                new ObjectParameter("TimeReservationCancel", timeReservationCancel) :
                new ObjectParameter("TimeReservationCancel", typeof(int));
    
            var licenseCodeParameter = licenseCode != null ?
                new ObjectParameter("LicenseCode", licenseCode) :
                new ObjectParameter("LicenseCode", typeof(string));
    
            var licenseDateParameter = licenseDate != null ?
                new ObjectParameter("LicenseDate", licenseDate) :
                new ObjectParameter("LicenseDate", typeof(string));
    
            var passwordComplexParameter = passwordComplex.HasValue ?
                new ObjectParameter("PasswordComplex", passwordComplex) :
                new ObjectParameter("PasswordComplex", typeof(bool));
    
            var passwordLenghtParameter = passwordLenght.HasValue ?
                new ObjectParameter("PasswordLenght", passwordLenght) :
                new ObjectParameter("PasswordLenght", typeof(short));
    
            var passwordHistoryParameter = passwordHistory.HasValue ?
                new ObjectParameter("PasswordHistory", passwordHistory) :
                new ObjectParameter("PasswordHistory", typeof(short));
    
            var passwordAgeParameter = passwordAge.HasValue ?
                new ObjectParameter("PasswordAge", passwordAge) :
                new ObjectParameter("PasswordAge", typeof(short));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var economicCodeParameter = economicCode != null ?
                new ObjectParameter("EconomicCode", economicCode) :
                new ObjectParameter("EconomicCode", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var insuranceBrokerIDParameter = insuranceBrokerID.HasValue ?
                new ObjectParameter("InsuranceBrokerID", insuranceBrokerID) :
                new ObjectParameter("InsuranceBrokerID", typeof(int));
    
            var insuranceUserIDParameter = insuranceUserID != null ?
                new ObjectParameter("InsuranceUserID", insuranceUserID) :
                new ObjectParameter("InsuranceUserID", typeof(string));
    
            var insurancePasswordParameter = insurancePassword != null ?
                new ObjectParameter("InsurancePassword", insurancePassword) :
                new ObjectParameter("InsurancePassword", typeof(string));
    
            var insuranceAgencyCodeParameter = insuranceAgencyCode != null ?
                new ObjectParameter("InsuranceAgencyCode", insuranceAgencyCode) :
                new ObjectParameter("InsuranceAgencyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SysParam_Update", officeCodeParameter, officeNameParameter, eOfficeNameParameter, officeAddressParameter, officeTelParameter, officeFaxParameter, homePageParameter, eMailParameter, sMTPServerParameter, usernameParameter, passwordParameter, fromNameParameter, fromAddressParameter, replyToParameter, encodeMethodParameter, updateTypeParameter, updatePathParameter, taxForPassengerParameter, taxForOfficeParameter, taxPercentParameter, isIATAParameter, isGroupParameter, timeReservationCancelParameter, licenseCodeParameter, licenseDateParameter, passwordComplexParameter, passwordLenghtParameter, passwordHistoryParameter, passwordAgeParameter, nationalIDParameter, economicCodeParameter, zipCodeParameter, insuranceBrokerIDParameter, insuranceUserIDParameter, insurancePasswordParameter, insuranceAgencyCodeParameter);
        }
    
        public virtual int SP_Flights_Insert(ObjectParameter flightID, string flightNo, Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<System.DateTime> flightTime, Nullable<System.DateTime> arrivalTime, Nullable<int> airLineID, Nullable<byte> flightType, Nullable<byte> directionType, Nullable<short> capacity, Nullable<int> airplaneID, Nullable<decimal> adultPrice, Nullable<decimal> childPrice, Nullable<decimal> infantPrice, Nullable<int> fromAirportID, Nullable<int> toAirportID, string bag, string flightClass)
        {
            var flightNoParameter = flightNo != null ?
                new ObjectParameter("FlightNo", flightNo) :
                new ObjectParameter("FlightNo", typeof(string));
    
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var flightTimeParameter = flightTime.HasValue ?
                new ObjectParameter("FlightTime", flightTime) :
                new ObjectParameter("FlightTime", typeof(System.DateTime));
    
            var arrivalTimeParameter = arrivalTime.HasValue ?
                new ObjectParameter("ArrivalTime", arrivalTime) :
                new ObjectParameter("ArrivalTime", typeof(System.DateTime));
    
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            var flightTypeParameter = flightType.HasValue ?
                new ObjectParameter("FlightType", flightType) :
                new ObjectParameter("FlightType", typeof(byte));
    
            var directionTypeParameter = directionType.HasValue ?
                new ObjectParameter("DirectionType", directionType) :
                new ObjectParameter("DirectionType", typeof(byte));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(short));
    
            var airplaneIDParameter = airplaneID.HasValue ?
                new ObjectParameter("AirplaneID", airplaneID) :
                new ObjectParameter("AirplaneID", typeof(int));
    
            var adultPriceParameter = adultPrice.HasValue ?
                new ObjectParameter("AdultPrice", adultPrice) :
                new ObjectParameter("AdultPrice", typeof(decimal));
    
            var childPriceParameter = childPrice.HasValue ?
                new ObjectParameter("ChildPrice", childPrice) :
                new ObjectParameter("ChildPrice", typeof(decimal));
    
            var infantPriceParameter = infantPrice.HasValue ?
                new ObjectParameter("InfantPrice", infantPrice) :
                new ObjectParameter("InfantPrice", typeof(decimal));
    
            var fromAirportIDParameter = fromAirportID.HasValue ?
                new ObjectParameter("FromAirportID", fromAirportID) :
                new ObjectParameter("FromAirportID", typeof(int));
    
            var toAirportIDParameter = toAirportID.HasValue ?
                new ObjectParameter("ToAirportID", toAirportID) :
                new ObjectParameter("ToAirportID", typeof(int));
    
            var bagParameter = bag != null ?
                new ObjectParameter("Bag", bag) :
                new ObjectParameter("Bag", typeof(string));
    
            var flightClassParameter = flightClass != null ?
                new ObjectParameter("FlightClass", flightClass) :
                new ObjectParameter("FlightClass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_Insert", flightID, flightNoParameter, fromCityIDParameter, toCityIDParameter, flightTimeParameter, arrivalTimeParameter, airLineIDParameter, flightTypeParameter, directionTypeParameter, capacityParameter, airplaneIDParameter, adultPriceParameter, childPriceParameter, infantPriceParameter, fromAirportIDParameter, toAirportIDParameter, bagParameter, flightClassParameter);
        }
    
        public virtual int SP_Flights_Update(Nullable<int> flightID, string flightNo, Nullable<int> fromCityID, Nullable<int> toCityID, Nullable<int> airLineID, Nullable<byte> flightType, Nullable<byte> directionType, Nullable<short> capacity, Nullable<int> airplaneID, Nullable<decimal> adultPrice, Nullable<decimal> childPrice, Nullable<decimal> infantPrice, Nullable<int> fromAirportID, Nullable<int> toAirportID, string bag, string flightClass, Nullable<int> pidModifier)
        {
            var flightIDParameter = flightID.HasValue ?
                new ObjectParameter("FlightID", flightID) :
                new ObjectParameter("FlightID", typeof(int));
    
            var flightNoParameter = flightNo != null ?
                new ObjectParameter("FlightNo", flightNo) :
                new ObjectParameter("FlightNo", typeof(string));
    
            var fromCityIDParameter = fromCityID.HasValue ?
                new ObjectParameter("FromCityID", fromCityID) :
                new ObjectParameter("FromCityID", typeof(int));
    
            var toCityIDParameter = toCityID.HasValue ?
                new ObjectParameter("ToCityID", toCityID) :
                new ObjectParameter("ToCityID", typeof(int));
    
            var airLineIDParameter = airLineID.HasValue ?
                new ObjectParameter("AirLineID", airLineID) :
                new ObjectParameter("AirLineID", typeof(int));
    
            var flightTypeParameter = flightType.HasValue ?
                new ObjectParameter("FlightType", flightType) :
                new ObjectParameter("FlightType", typeof(byte));
    
            var directionTypeParameter = directionType.HasValue ?
                new ObjectParameter("DirectionType", directionType) :
                new ObjectParameter("DirectionType", typeof(byte));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(short));
    
            var airplaneIDParameter = airplaneID.HasValue ?
                new ObjectParameter("AirplaneID", airplaneID) :
                new ObjectParameter("AirplaneID", typeof(int));
    
            var adultPriceParameter = adultPrice.HasValue ?
                new ObjectParameter("AdultPrice", adultPrice) :
                new ObjectParameter("AdultPrice", typeof(decimal));
    
            var childPriceParameter = childPrice.HasValue ?
                new ObjectParameter("ChildPrice", childPrice) :
                new ObjectParameter("ChildPrice", typeof(decimal));
    
            var infantPriceParameter = infantPrice.HasValue ?
                new ObjectParameter("InfantPrice", infantPrice) :
                new ObjectParameter("InfantPrice", typeof(decimal));
    
            var fromAirportIDParameter = fromAirportID.HasValue ?
                new ObjectParameter("FromAirportID", fromAirportID) :
                new ObjectParameter("FromAirportID", typeof(int));
    
            var toAirportIDParameter = toAirportID.HasValue ?
                new ObjectParameter("ToAirportID", toAirportID) :
                new ObjectParameter("ToAirportID", typeof(int));
    
            var bagParameter = bag != null ?
                new ObjectParameter("Bag", bag) :
                new ObjectParameter("Bag", typeof(string));
    
            var flightClassParameter = flightClass != null ?
                new ObjectParameter("FlightClass", flightClass) :
                new ObjectParameter("FlightClass", typeof(string));
    
            var pidModifierParameter = pidModifier.HasValue ?
                new ObjectParameter("PidModifier", pidModifier) :
                new ObjectParameter("PidModifier", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Flights_Update", flightIDParameter, flightNoParameter, fromCityIDParameter, toCityIDParameter, airLineIDParameter, flightTypeParameter, directionTypeParameter, capacityParameter, airplaneIDParameter, adultPriceParameter, childPriceParameter, infantPriceParameter, fromAirportIDParameter, toAirportIDParameter, bagParameter, flightClassParameter, pidModifierParameter);
        }
    }
}
